=======================================
This is the doctest to 7-base_geometry.py
=======================================

Functions:
        Method that validates an integer

Operations:
        Copy a list

Using ``BaseGeometry``
--------------------

Import the class:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Instantiating Class:

    >>> bg = BaseGeometry()

Starting test:

    >>> bg.integer_validator("number", 27)

value as string:

    >>> bg.integer_validator("number", "hi")
    Traceback (most recent call last):
    ...
    TypeError: number must be an integer

value as float:

    >>> bg.integer_validator("number", 1.2)
    Traceback (most recent call last):
    ...
    TypeError: number must be an integer

value as tuple:

    >>> bg.integer_validator("number", (2,3,4))
    Traceback (most recent call last):
    ...
    TypeError: number must be an integer

value as list:

    >>> bg.integer_validator("number", [2,3,4])
    Traceback (most recent call last):
    ...
    TypeError: number must be an integer

value as dictionary:

    >>> bg.integer_validator("number", {2,3,4})
    Traceback (most recent call last):
    ...
    TypeError: number must be an integer

value as none:

    >>> bg.integer_validator("number", None)
    Traceback (most recent call last):
    ...
    TypeError: number must be an integer

value as True:

    >>> bg.integer_validator("number", True)
    Traceback (most recent call last):
    ...
    TypeError: number must be an integer

value as False:

    >>> bg.integer_validator("number", False)
    Traceback (most recent call last):
    ...
    TypeError: number must be an integer

value as nan:

    >>> bg.integer_validator("number", int('nan'))
    Traceback (most recent call last):
    ...
    ValueError: invalid literal for int() with base 10: 'nan'

value as infinite number:

    >>> bg.integer_validator("number", int('inf'))
    Traceback (most recent call last):
    ...
    ValueError: invalid literal for int() with base 10: 'inf'

value as zero:

    >>> bg.integer_validator("number", 0)
    Traceback (most recent call last):
    ...
    ValueError: number must be greater than 0

value as negative number:

    >>> bg.integer_validator("number", -3)
    Traceback (most recent call last):
    ...
    ValueError: number must be greater than 0

method only with one argument:

    >>> bg.integer_validator(4)
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

method with three arguments:

    >>> bg.integer_validator(4, 23, 1)
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

method without arguments:

    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'